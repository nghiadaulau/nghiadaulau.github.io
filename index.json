[
{
	"uri": "https://nghiadaulau.github.io/",
	"title": "Serverless",
	"tags": [],
	"description": "",
	"content": "Building RestAPI with Serverless Model Overview In this workshop, we will explore the basic concepts and practice creating a RestAPI based on the Serverless model. We will be guided through and work with services such as Route 53, API Gateway, Lambda, ECR, and AWS Certificate Manager.\nContent Introduction Preparation Steps Lambda \u0026amp; API Gateway Custom Domain \u0026amp; SSL Resource Cleanup "
},
{
	"uri": "https://nghiadaulau.github.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Serverless Architecture (or No-Server Architecture) is a cloud computing model where developers do not have to manage servers. Instead, everything is operated by automated management services provided by the cloud provider, reducing the operational burden.\nWhat are the advantages of using Serverless?\nAuto-scaling: The system will automatically adjust resources to meet traffic demands, regardless of whether the traffic is large or small. This ensures that your application always operates stably without worrying about upgrading or adjusting the infrastructure. Pay-per-use: You only pay for the resources that are actually used, such as the number of API requests or the execution time of a Lambda function. This helps optimize costs, especially for applications with uneven traffic. No server management: You don\u0026rsquo;t need to manage, maintain, or update servers. AWS will handle all of this, allowing you to focus more on developing and improving the application. Strong integration with other services: Serverless often integrates well with many other cloud services, such as databases, storage, and AI/ML services, helping you build comprehensive applications without needing to combine multiple different technologies. These advantages make Serverless an attractive choice for building modern applications, especially when you need a flexible, cost-effective, and easy-to-manage system.\n"
},
{
	"uri": "https://nghiadaulau.github.io/3-lambdaapigateway/3.1-lambda/",
	"title": "Lambda",
	"tags": [],
	"description": "",
	"content": " Search for Lambda. Select Lambda. On the Lambda page, click Create Function. On the Create Function page: Switch to the Container Image tab. Enter the function name in the Function name field. In the Container Image URI section, click Browse Image. Select the repository created earlier, \u0026ldquo;django-serverless-demo.\u0026rdquo; Tick the appropriate image. Click Select Image to choose this image. In the Architecture section, select the architecture that matches your image. Since we built x86, I will select x86. Click Create Function to create the image. Next, we will create an API Gateway to trigger this Lambda.\n"
},
{
	"uri": "https://nghiadaulau.github.io/2-prerequiste/2.1-route53/",
	"title": "Register Route 53 and Code",
	"tags": [],
	"description": "",
	"content": "In this step, we will register a domain on Route 53 to use for the Lab. After that, I will provide a source code written in Django - Python for practice in this lab.\nTo learn more details about Route 53, you can refer to the AWS documentation below:\nAWS Route 53 Content Domain Registration Prepare Source Code "
},
{
	"uri": "https://nghiadaulau.github.io/2-prerequiste/2.1-route53/2.1.1-createroute53/",
	"title": "Registering a Domain with Route 53",
	"tags": [],
	"description": "",
	"content": "Registering with Route 53 Access the AWS console. Search for Route 53. Select Route 53. On the Route 53 page: Enter the domain you want to register in the Register Domain field and click Check. Alternatively, select Domains \u0026gt; Registered Domains. On the Registered Domains page, click on Register Domain. On the Register Domains page: Enter the domain you want to register in the Check availability for a domain field and click Search. Select the domain you want to register, then click Proceed to checkout. On the Checkout page: Confirm your domain information, then choose the Duration from 1 to 10 years. If you want Auto-renew, click the Auto-renew box (you can disable this feature later in the edit section). Next, fill in your basic contact information. Finally, Review and click Submit. On the Requests page:\nYou will see the domains you have registered below. After the payment is processed (Domain registration cannot use credits), the requests will show as Successful, and you will be able to use the domain in Route 53. "
},
{
	"uri": "https://nghiadaulau.github.io/3-lambdaapigateway/3.2-api-gateway/",
	"title": "API Gateway",
	"tags": [],
	"description": "",
	"content": " Search for API Gateway. Select API Gateway. On the API Gateway page: Scroll down to the Choose an API type section. Select HTTP API and click Build. At Step 1: Create an API: Click Add integration. Select Lambda, choose the Region ap-southeast-1, select your Lambda Function, and choose Version 2.0. In the API name field, enter your API name, then click Next. At Step 2: Configure Routes: In API Gateway, {proxy+} is a special path parameter used when configuring routes to enable \u0026ldquo;catch-all\u0026rdquo; or \u0026ldquo;proxy\u0026rdquo; for any path after this part of the URL.\nIn the Method section, select GET. In the Resource Path section, enter /{proxy+}. In the Integration target section, select the Lambda function. Finally, click Next. At Step 3: Define Stages: In the Stage Name section, select your Stage. In this case, choose the default stage Default, and then click Next. At Step 4: Review and Create: Review your configurations to ensure everything is correct. After reviewing, click Create. After creating the API Gateway, go back to the Lambda interface. You will see that the API Gateway has been triggered for your Lambda function. Next, we will proceed to configure SSL for the API using ACM.\n"
},
{
	"uri": "https://nghiadaulau.github.io/2-prerequiste/2.2-ecr/",
	"title": "Create ECR, Build Image, and Push Image",
	"tags": [],
	"description": "",
	"content": "Create ECR, Build Image, and Push Image In this step, we will create an ECR, build an image, and push it to the ECR for use in Lambda creation.\nAccess the AWS console Search for ECR. Select ECR. On the ECR page, click Create. On the Create Repository page: In the Visibility settings:\nPrivate: If you want your repository to be private. Public: If you want your repository to be public. In the Repository name field, enter the name of the repository you want; here, we\u0026rsquo;ll enter django-serverless-demo.\nIn the (Optional) Image scan settings:\nThis option allows you to enable image scanning to check for potential security vulnerabilities in the images you push to the repository. If enabled, the system will automatically scan the images and provide a report on any detected vulnerabilities. This is very useful if you want to ensure the safety of the images before using them in production. In the (Optional) Encryption settings:\nThis option allows you to enable encryption for the images stored in the repository. When encryption is enabled, all images will be encrypted before being stored, protecting data from unauthorized access. You can use AWS-managed encryption keys or manage your encryption keys for higher security control. In the (Optional) Tag Immutability:\nThis option allows you to enable tag immutability. When this feature is enabled, once a tag is assigned to an image, it cannot be changed or reassigned to another image. This ensures the integrity of image versions, avoiding accidental overwriting or changes to important tagged images. After making your selections, click Create Repository.\nClick on the repository you just created. Select View push commands to see how to push the image to the repository. Open Terminal in your source code directory. First, log in to your repository: aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin \u0026lt;account-id\u0026gt;.dkr.ecr.ap-southeast-1.amazonaws.com Next, build the image using the following command. For Mac M1 users who want to run the x86_64 architecture, add \u0026ndash;platform linux/amd64: docker build --platform linux/amd64 -t django-serverless-demo -f docker/DockerfileLambda . Finally, tag the image and push it to the ECR: docker tag django-serverless-demo:latest \u0026lt;acoount-id\u0026gt;.dkr.ecr.ap-southeast-1.amazonaws.com/django-serverless-demo:latest docker push \u0026lt;account-id\u0026gt;.dkr.ecr.ap-southeast-1.amazonaws.com/django-serverless-demo:latest Next, we will create Lambda \u0026amp; API Gateway.\n"
},
{
	"uri": "https://nghiadaulau.github.io/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to register a domain in order to use Amazon Route 53 in this tutorial.\nTo be able to deploy the serverless model in this exercise, we will learn about some services, how to initialize them, and finally I will provide a simple source code written in Python - Django to be able to connect the components completely.\nContent Register Route53 and Code Create ECR, build Image and push Image "
},
{
	"uri": "https://nghiadaulau.github.io/2-prerequiste/2.1-route53/2.1.2-preparesourcecode/",
	"title": "Prepare the Source Code",
	"tags": [],
	"description": "",
	"content": "Prepare the Source Code Source Code.\nTo practice in this Lab, I\u0026rsquo;ve prepared a source code written in Django - Python. You can clone it to experiment with serverles-django-demo. Explanation of the Mangum library.\nMangum is a Python library designed to support deploying ASGI (Asynchronous Server Gateway Interface) applications on AWS Lambda. This library acts as a converter, allowing ASGI applications to handle events from various AWS services, including API Gateway, Application Load Balancer (ALB), and Lambda@Edge. This is very useful for developers who want to leverage serverless architecture while using modern Python frameworks like FastAPI, Starlette, and Django. The process works as follows:\nReceiving an Event from API Gateway: When an HTTP request is sent to API Gateway, it generates an event containing information about the request, including the HTTP method, path, headers, body, etc. This event is then sent to the Lambda function. Converting the Event to ASGI: Mangum receives this event and converts it into an ASGI-compliant request, including Headers, Body, Path, and Method. Converting the Response: After Django processes the request, a response will be generated in the ASGI format. Mangum receives this response and converts it back into the format required by API Gateway, including Headers, Body, Status Code. Sending the Response back to API Gateway: Finally, the converted response is sent back to API Gateway, which then returns it to the client (the user or system that made the initial request). Preparing the Dockerfile\nFROM public.ecr.aws/lambda/python:3.9 ADD . \u0026#34;${LAMBDA_TASK_ROOT}\u0026#34; RUN pip3 install -r \u0026#34;${LAMBDA_TASK_ROOT}\u0026#34;/req.txt --target \u0026#34;${LAMBDA_TASK_ROOT}\u0026#34; # Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile) CMD [\u0026#34;lambda_handler._handler\u0026#34;] public.ecr.aws/lambda/python:3.9: This is the base image provided by AWS, containing the Python 3.9 runtime environment and the necessary tools to run a Lambda function on the AWS Lambda platform. In the context of AWS Lambda and API Gateway, the handler is the entry point for all events sent to the Lambda function. When an event (such as an HTTP request from API Gateway) occurs, AWS Lambda invokes the specified handler. Therefore, we need to specify the correct handler in this Docker Image. "
},
{
	"uri": "https://nghiadaulau.github.io/3-lambdaapigateway/",
	"title": "Lambda &amp; API Gateway",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a Lambda and an API Gateway to be able to Trigger the newly created Lambda.\nContent 3.1. Create Lambda 3.2. Create API Gateway\n"
},
{
	"uri": "https://nghiadaulau.github.io/4-acm/",
	"title": "Custom Domain &amp; SSL",
	"tags": [],
	"description": "",
	"content": "Next, we need to configure the domain for the API Gateway we just created. We\u0026rsquo;ll proceed to create a custom domain and configure SSL for that domain using AWS Certificate Manager.\nCreate a Certificate Search for and access AWS Certificate Manager on the Console. Click Request a certificate. On the Request certificate screen: Select request a public certificate. Click Next. On the Request public certificate screen: Enter the domain name in the Fully qualified domain name field. In the Validation method section, select DNS validation. In the Key Algorithm section, choose RSA 2048. Click Next to complete the setup. On the Certificate detail screen: Click Create Records in Route 53. Once on the create records screen, click Create Records to initiate. Then, wait for the verification to turn green, indicating successful creation. Create a Custom Domain On the API Gateway screen, select Custom Domain Names: Click Create. On the Create domain name screen: Enter your domain name in the domain name field. Select the API endpoint type: Regional. In the ACM certificate section, choose the ACM you set up earlier. Click Create Domain Name. In the API Gateway Domain Name section, this will be the domain you configure in Route 53 to map your custom domain. On the Custom domain names screen: Select the domain you just created. Go to the API Mappings tab. Click Configure API Mappings. Select the API in the API field. Choose the stage you want to map, in this case, I\u0026rsquo;ll select the default stage. Click Save. Map Domain Name Search for and access AWS Route 53. Go to Hosted Zones in the navigation bar. Select the Hosted Zone of your domain. On your domain\u0026rsquo;s hosted zone screen: Click Create Record. On the Create Record screen: Enter your subdomain in the record name field. Choose CNAME as the Record Type. Enter the API Gateway Domain Name in the Value field. Click Create Records. That\u0026rsquo;s it! Now, we can test if everything is working using cURL.\nIt seems everything is set up correctly. The setup is now complete.\n"
},
{
	"uri": "https://nghiadaulau.github.io/5-cleanup/",
	"title": "Cleaning Up Resources",
	"tags": [],
	"description": "",
	"content": "We will follow the steps below to delete the resources we created in this practice session.\nDelete Lambda Function Access the Lambda service management interface. Click Functions. Click to select your Function. Click Actions and choose Delete. Enter \u0026ldquo;delete\u0026rdquo; in the pop-up and click Delete. Access the ECR service management interface. Click Repositories. Click to select Delete. Enter \u0026ldquo;delete\u0026rdquo; in the pop-up and click Delete. Access the API Gateway service management interface. Click Custom Domain Names. Click to select the domain, go to the API Mappings tab, and select Configure API mappings. Remove the mappings. Click APIs. Click to select your API. Click Delete. Enter \u0026ldquo;confirm\u0026rdquo; in the pop-up and click Delete. "
},
{
	"uri": "https://nghiadaulau.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nghiadaulau.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]